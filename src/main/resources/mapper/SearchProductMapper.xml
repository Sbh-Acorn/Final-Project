<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.Caltizm.Repository.SearchProductRepository">


    <!-- 10개 제한 -->
    <select id="findProductsByName" parameterType="string" resultType="map">
        SELECT
        product_id,
        name
        FROM Product
        WHERE name LIKE CONCAT('%', #{name}, '%')
        LIMIT 10;
    </select>

    <!-- 전체 데이터 -->
    <select id="findAllProductIdsByName" parameterType="string" resultType="string">
        SELECT product_id
        FROM Product
        WHERE name LIKE CONCAT('%', #{name}, '%');
    </select>

    <!-- ID로 상품의 전체 데이터 가져오기 -->
    <select id="findProductById" parameterType="string" resultType="com.example.Caltizm.DTO.ProductDTO">
        SELECT
        p.product_id as product_id,
        b.name AS brand, -- 브랜드 이름
        p.image_url as image_url,
        p.name as name,
        p.original_price as original_price,
        p.current_price as current_price,
        p.description as description,
        c1.name AS category1, -- 카테고리1 이름
        c2.name AS category2, -- 카테고리2 이름
        c3.name AS category3, -- 카테고리3 이름
        p.is_excludedVoucher as is_excludedVoucher,
        p.is_fta as is_fta
        FROM Product p
        LEFT JOIN Brand b ON p.brand_id = b.brand_id -- 브랜드 테이블과 조인
        LEFT JOIN Category1 c1 ON p.category1_id = c1.category1_id -- 카테고리1 테이블과 조인
        LEFT JOIN Category2 c2 ON p.category2_id = c2.category2_id -- 카테고리2 테이블과 조인
        LEFT JOIN Category3 c3 ON p.category3_id = c3.category3_id -- 카테고리3 테이블과 조인
        WHERE p.is_deleted = false -- 삭제되지 않은 제품만 조회
        And p.product_id = #{id}
        ORDER BY b.name ASC, p.name ASC;
    </select>
    <!-- 모든 상품 데이터 가져오기 -->
    <select id="getAllProducts" resultType="com.example.Caltizm.DTO.ProductDTO">
        SELECT
        brand_id AS brand,
        product_id,
        image_url,
        name,
        original_price,
        current_price,
        description,
        category1_id AS category1,
        category2_id AS category2,
        category3_id AS category3,
        is_excludedVoucher
        FROM Product;
    </select>
    <select id="findProductsByIds" parameterType="list" resultType="com.example.Caltizm.DTO.ProductDTO">
        SELECT
        p.product_id,
        b.name AS brand, -- 브랜드 이름
        p.image_url,
        p.name,
        p.original_price,
        p.current_price,
        p.description,
        c1.name AS category1, -- 카테고리1 이름
        c2.name AS category2, -- 카테고리2 이름
        c3.name AS category3, -- 카테고리3 이름
        p.is_excludedVoucher,
        p.is_fta
        FROM Product p
        LEFT JOIN Brand b ON p.brand_id = b.brand_id -- 브랜드 테이블과 조인
        LEFT JOIN Category1 c1 ON p.category1_id = c1.category1_id -- 카테고리1 테이블과 조인
        LEFT JOIN Category2 c2 ON p.category2_id = c2.category2_id -- 카테고리2 테이블과 조인
        LEFT JOIN Category3 c3 ON p.category3_id = c3.category3_id -- 카테고리3 테이블과 조인
        WHERE p.is_deleted = false -- 삭제되지 않은 제품만 조회
        AND p.product_id IN
        <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY b.name ASC, p.name ASC;
    </select>

    <!-- 검색된 상품 ID로 브랜드 목록 조회 -->
    <select id="findBrandsByProductIds" parameterType="list" resultType="string">
        SELECT DISTINCT b.name
        FROM Product p
        LEFT JOIN Brand b ON p.brand_id = b.brand_id
        WHERE p.is_deleted = false
        <if test="list != null and list.size() > 0">
            AND p.product_id IN
            <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        ORDER BY b.name;
    </select>

    <select id="findCategoriesByProductIds" parameterType="list" resultType="string">
        SELECT name
        FROM Category1
        WHERE EXISTS (
        SELECT 1 FROM Product p
        WHERE p.category1_id = Category1.category1_id
        AND p.is_deleted = false
        <if test="list != null and list.size() > 0">
            AND p.product_id IN
            <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        )
        UNION
        SELECT name
        FROM Category2
        WHERE EXISTS (
        SELECT 1 FROM Product p
        WHERE p.category2_id = Category2.category2_id
        AND p.is_deleted = false
        <if test="list != null and list.size() > 0">
            AND p.product_id IN
            <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        )
        UNION
        SELECT name
        FROM Category3
        WHERE EXISTS (
        SELECT 1 FROM Product p
        WHERE p.category3_id = Category3.category3_id
        AND p.is_deleted = false
        <if test="list != null and list.size() > 0">
            AND p.product_id IN
            <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        )
        ORDER BY name;
    </select>

    <select id="findMaxPriceByProductIds" parameterType="list" resultType="map">
        SELECT MAX(p.current_price) AS max_price
        FROM Product p
        WHERE p.is_deleted = false
        <if test="list != null and list.size() > 0">
            AND p.product_id IN
            <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>;
    </select>
</mapper>
